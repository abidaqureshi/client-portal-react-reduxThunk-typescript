using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Threading;
using System.Threading.Tasks;
using WhichPharmaPortal.Models.Client;
using WhichPharma.Services.Identity;
using WhichPharma.Services.Platform;
using System.Linq;
using File21 = System.IO.File;
using Directory = System.IO.Directory;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.IO;

namespace WhichPharmaPortal.Controllers
{
    /// <summary>
    /// Platform controller (Administrator or Contributor roles required)
    /// </summary>
    [Authorize(Roles = Roles.AdministratorOrContributor)]
    [ApiController]
    [Route("v1/platform")]
    [Produces("application/json")]
    [ProducesErrorResponseType(typeof(void))]
    public class PlatformController : ControllerBase
    {
        private readonly ILogger<PlatformController> _logger;
        private readonly IPlatformService _platformService;

        /// <summary>
        /// Platform controller
        /// </summary>
        public PlatformController(
            ILogger<PlatformController> logger, 
            IPlatformService platformService)
        {
            _logger = logger;
            _platformService = platformService;
        }







        private static string RemoveSpaces(string item)
        {
            return string.IsNullOrWhiteSpace(item) ? item : string.Join(" ", Regex.Matches(item, "\\w+").Select(I => I.Value.ToLower()))
                .Replace("á", "a")
                .Replace("à", "a")
                .Replace("é", "e")
                .Replace("è", "e")
                .Replace("í", "i")
                .Replace("ì", "i")
                .Replace("ó", "o")
                .Replace("ò", "o")
                .Replace("ú", "u")
                .Replace("ù", "u")
                ;
        }



        const string WORK_DIR = "C:\\RBPharmaPlatform\\Data";
        public static string Run(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo
            {
                FileName = "C:\\Python38\\python.exe",
                Arguments = string.Format("{0} {1}", cmd, args),
                UseShellExecute = false,// Do not use OS shell
                CreateNoWindow = true, // We don't need new window
                RedirectStandardOutput = true,// Any output, generated by application will be redirected back
                RedirectStandardError = true, // Any error in standard output will be redirected back (for example exceptions)
                WorkingDirectory = WORK_DIR
            };
            using Process process = Process.Start(start);
            using StreamReader reader = process.StandardOutput;
            string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
            string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")

            //_logger.LogInformation("Result Python: " + result);

            return result;
        }

        /// <summary>
        /// Get processing settings for the corresponding country
        /// </summary>
        /// <param name="country"></param>
        /// <param name="token"></param>
        /// <returns></returns>
        [HttpGet("processingSettings/pformsRoutes/{country}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(ProcessingSettings))]
        public async Task<IActionResult> GetPforms([FromRoute] string country, CancellationToken token)
        {
            try
            {
                
                var pforms = await _platformService.GetFormsAsync(country, token);

                var dci = await _platformService.GetDCIAsync(country, token);
                var cat = await _platformService.GetCatPformsAsync();
                var atc = await _platformService.GetATCAsync();
                var x = cat.GroupBy(I => I.PharmaceuticalPhorm).Select(I=>I.Key).ToArray();
/*                pforms.Where(i => !i.Closed).ToList().ForEach(i => {
                    var t = x.GetValueOrDefault(RemoveSpaces(i.Translated)?.Trim() ?? "NADSAD");
                    if (i.Translated== "effervescent tablets")
                    {

                    }
                    if (t!=null)
                    {
                        i.Final = t.PharmaceuticalPhorm.Split(" + ").Distinct().ToArray();
                        return;
                    }
                    var t2 = x.OrderByDescending(I => I.Key.Length).Where(I => I.Key.StartsWith(RemoveSpaces(i.Translated)?.Trim() ?? "NASDA")).ToList();
                    if (t2 != null && t2.Count!=0)
                    {
                        i.Final = t2.Select(i => i.Value.PharmaceuticalPhorm.Split(" + ")).SelectMany(i => i).Distinct().ToArray();
                    }
                });
                    File21.Delete(WORK_DIR + "\\links.json");

*/              var toTranslate = pforms.Where(I=>string.IsNullOrEmpty(I.Translated)).Select(I=> { I.Final = null; return I; }).ToList();
                File21.Delete(WORK_DIR + "\\links.json");
                File21.WriteAllText(WORK_DIR + "\\example.json", JsonConvert.SerializeObject(toTranslate));
                File21.WriteAllText(WORK_DIR + "\\convertcsv.json", JsonConvert.SerializeObject(x));
                Run("Platform_links.py", string.Empty);
                if (File21.Exists(WORK_DIR+"\\links.json"))
                {
                    var x2 = File21.ReadAllLines(WORK_DIR + "\\links.json").Select(I => JsonConvert.DeserializeObject<HarmonizedPform2>(I)).ToDictionary(i=>i.Original);
                    File21.Delete(WORK_DIR + "\\links.json");
                    //var L = new List<HarmonizedPform>();
                    var count = 0;
                    foreach (var item in pforms)
                    {
                     
                        var x3 = x2.GetValueOrDefault(item.Original);
                        if (x3==null)
                        {
                            continue;
                        }
                        count++;
                        item.Translated = x3.Translated;
                        item.Final = x3.Alternatives ?? new []{ x3.Final };
                        await _platformService.ReplacePformsAsync(item);
                    }
                    _ = "";

                }
                var t = cat.GroupBy(I=>I.PharmaceuticalPhorm+"+"+I.Category+"+"+I.SubCategory).OrderByDescending(I=>I.Count()).ToList();
                var ret = new ProcessingSettings
                {
                    DrugFormsMap2 = pforms.ToDictionary(I=>I.Original),
                    DciMap= dci.ToDictionary(I=>I.Original),
                    ATCMap = atc.ToDictionary(I=>I.ATCCode),
                    CatsMap = cat.ToDictionary(i => i.PharmaceuticalPhorm+"+"+i.Category+"+"+i.SubCategory), 
                };
                return Ok(ret);
            }
            catch (System.Exception e)
            {
                return BadRequest();
            }
        }




        /// <summary>
        /// Get processing settings for the corresponding scraping origin
        /// </summary>
        /// <response code="200">Returns the processing settings</response>
        [HttpGet("processingSettings/{origin}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(ProcessingSettings))]
        public async Task<IActionResult> GetProcessingSettings([FromRoute] string origin, CancellationToken token)
        {
            return Ok(await _platformService.GetProcessingSettingsAsync(origin, token));
        }

        /// <summary>
        /// Update processing settings for the corresponding scraping origin
        /// </summary>
        /// <response code="200">Processing settings successfully updated</response>
        [HttpPost("processingSettings/{origin}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<IActionResult> UpdateProcessingSettings(
            [FromRoute] string origin, 
            [FromBody] ProcessingSettings settings, 
            CancellationToken token)
        {
            await _platformService.UpdateProcessingSettingsAsync(origin, settings, token);
            return Ok();
        }

        /// <summary>
        /// Send request to re-process products
        /// </summary>
        /// <response code="200">Re-process request successfully submitted</response>
        [HttpPost("processing/{origin}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<IActionResult> SendReProcessingRequest(
            [FromRoute] string origin,
            [FromBody] string[] valuesAffected,
            CancellationToken token)
        {
            if (valuesAffected.Length!=0)
            {
                var file = "C:\\RBPharmaPlatform\\Data\\Platform";
                if (Directory.Exists(file+"\\"+valuesAffected[0]))
                {
                    return BadRequest();
                }
                Directory.CreateDirectory(file+"\\"+valuesAffected[0]);
                var s = DateTime.Now.ToShortDateString().Replace("/","-");
                var s2 = DateTime.Now.ToShortTimeString().Replace(":","-");
                var use = User.Identity.Name;
                var pform = await _platformService.GetFormsAsync(origin, token);
                File21.WriteAllText(file + "\\" + valuesAffected[0]+"\\"+origin+"_"+s+"_"+s2+"_"+use+"-pforms.json", JsonConvert.SerializeObject(pform));
                var cat = await _platformService.GetCatPformsAsync();
                File21.WriteAllText(file + "\\" + valuesAffected[0]+"\\"+origin+"_"+s+"_"+s2+"_"+use+"-cats.json", JsonConvert.SerializeObject(cat));
                var dci = await _platformService.GetDCIAsync(origin,token);
                File21.WriteAllText(file + "\\" + valuesAffected[0]+"\\"+origin+"_"+s+"_"+s2+"_"+use+"-dci.json", JsonConvert.SerializeObject(dci));

                return Ok();
            }
            return BadRequest();
        }

        /// <summary>
        /// /
        /// </summary>
        /// <param name="origin"></param>
        /// <param name="valuesAffected"></param>
        /// <param name="token"></param>
        /// <returns></returns>
        [HttpPost("processingBackup/{origin}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<IActionResult> SendRestoreFromBackupRequest(
            [FromRoute] string origin,
            [FromBody] string[] valuesAffected,
            CancellationToken token)
        {
            if (valuesAffected.Length!=0)
            {
                var file = "C:\\RBPharmaPlatform\\Data\\Platform";
                if (!Directory.Exists(file+"\\"+valuesAffected[0]))
                {
                    return BadRequest();
                }
                var dir =Directory.GetFiles(file + "\\" + valuesAffected[0]);
                var pfDir = dir.FirstOrDefault(I => I.EndsWith("-pforms.json"));
                var catDir = dir.FirstOrDefault(I => I.EndsWith("-cats.json"));
                var dciDir = dir.FirstOrDefault(I => I.EndsWith("-dci.json"));
                if (pfDir==null || catDir==null || dciDir == null)
                {
                    return BadRequest();
                }
                var pforms = JsonConvert.DeserializeObject<List<HarmonizedPform>>(File21.ReadAllText(pfDir));
                var dci= JsonConvert.DeserializeObject<List<HarmonizedPform>>(File21.ReadAllText(dciDir));
                var cat= JsonConvert.DeserializeObject<List<HarmonizeCatForm>>(File21.ReadAllText(catDir));
                await _platformService.RestoreBackupAsync(pforms, dci, cat, origin);
                return Ok();
            }
            return BadRequest();
        }

        /// <summary>
        /// Get administration and pharmaceutical form translations
        /// </summary>
        /// <response code="200">Returns the processing settings</response>
        [HttpGet("terms/{language}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(ProcessingSettings))]
        public async Task<IActionResult> GetTermsTranslations([FromRoute] string language, CancellationToken token)
        {
            return Ok(await _platformService.GetTermsTranslationsAsync(language, token));
        }
    }
}
